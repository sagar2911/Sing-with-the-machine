{"version":3,"sources":["loadFile.js","Welcome.js","GamePlay.js","App.js","serviceWorker.js","index.js"],"names":["loadMidiFileFromServer","filename","Error","fetch","then","resp","arrayBuffer","Welcome","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasLoadedFile","loadedFileName","handleFileInput","bind","assertThisInitialized","file","_this2","console","log","Promise","resolve","reject","fileReader","FileReader","onload","onerror","readAsText","evt","target","result","replace","loadFile","text","fileHandler","name","react_default","a","createElement","id","es","style","maxWidth","title","onChange","secondary","marginTop","loadedFilename","raised","onClick","play","primary","Component","GamePlay","currentChunkIdx","transitioning","chunksToDisplay","chunks","startPlayer","pianoInstrument","bassInstrument","percussionInstrument","ac","AudioContext","loadPianoPromise","Soundfont","instrument","loadBassPromise","loadPercussionPromise","data","midiData","catch","error","advanceToNextChunk","player","isPlaying","stop","MidiPlayer","Player","event","noteName","currentTime","gain","velocity","on","loadArrayBuffer","_this3","setState","newArr","slice","push","_this4","className","map","chunk","idx","key","lastSentenceIdx","width","firstSentenceIdx","length","sentencesToDisplay","i","sentences","valence","arousal","dominance","App","playing","split","filter","sentence","method","headers","Accept","Content-Type","body","JSON","stringify","json","Math","random","src_GamePlay_0","src_Welcome_0","Boolean","window","location","hostname","match","WebFontLoader","load","google","families","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.593ddb68.chunk.js","sourcesContent":["export function loadFile(file) {\n  if (!file) {\n    return;\n  }\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = resolve;\n    fileReader.onerror = reject;\n    fileReader.readAsText(file);\n  }).then((evt) => evt.target.result.replace(/(\\r\\n|\\n|\\r)/gm, \" \"));\n}\n\nexport function loadMidiFileFromServer(filename) {\n  if (!filename) {\n    throw new Error('Invalid filename');\n  }\n  return fetch(filename)\n    .then((resp) => resp.arrayBuffer());\n}\n","import React, { Component } from 'react';\nimport './Welcome.css';\nimport { loadFile } from './loadFile';\n\nimport { Button, FileInput, Card, CardText, CardTitle } from 'react-md';\n\nclass Welcome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasLoadedFile: false,\n      loadedFileName: \"\"\n    };\n\n    // bind all the functions\n    this.handleFileInput = this.handleFileInput.bind(this);\n  }\n\n  handleFileInput(file) {\n    console.log(\"Welcome handleFileInput\");\n    loadFile(file)\n      .then((text) => {\n        this.props.fileHandler(file.name, text);\n      });\n  }\n\n  render() {\n    return (\n      <div id=\"welcome\">\n        <h1>Sing With The Machine</h1>\n\n        <Card style={{maxWidth: 500}}>\n          <CardTitle title=\"Welcome!\" />\n          <CardText>\n            <p>\n              This tool generates music for narratives. Simply load a text\n              file and it will be parsed into mood chunks which will\n              then have music generated for them. After that, press \"Play\"\n              and start enjoying a musical piece set to match the exact text\n              you're reading!\n            </p>\n            <h3>Load a text file</h3>\n            <FileInput id=\"game-file\" onChange={this.handleFileInput} name=\"images\" secondary/>\n            <br/>\n            <label style={{marginTop: \"40px\",}}>{this.props.loadedFilename}</label>\n            <br/>\n            <br/>\n            {\n              this.props.hasLoadedFile ? <Button raised onClick={this.props.play} primary>Play</Button> : \"\"\n            }\n          </CardText>\n        </Card>\n\n      </div>\n    );\n  }\n}\n\nexport default Welcome;\n","import React, { Component } from 'react';\nimport './GamePlay.css';\n\nimport { loadMidiFileFromServer } from './loadFile';\n\nimport { Button, Card, CardText } from 'react-md';\n\nimport MidiPlayer from 'midi-player-js';\nimport Soundfont from 'soundfont-player';\n\nclass GamePlay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentChunkIdx: 0,\n      transitioning: false,\n      chunksToDisplay: [this.props.chunks[0]],\n    };\n\n    this.startPlayer = this.startPlayer.bind(this);\n\n    this.pianoInstrument = null;\n    this.bassInstrument = null;\n    this.percussionInstrument = null;\n    this.ac = new AudioContext();\n    const loadPianoPromise = Soundfont.instrument(this.ac, '/acoustic_grand_piano.js').then((instrument) => {\n      this.pianoInstrument = instrument;\n    });\n    const loadBassPromise = Soundfont.instrument(this.ac, '/acoustic_bass.js').then((instrument) => {\n      this.bassInstrument = instrument;\n    });\n    const loadPercussionPromise = Soundfont.instrument(this.ac, '/woodblock.js').then((instrument) => {\n      this.percussionInstrument = instrument;\n    });\n\n    loadPianoPromise\n      .then(() => loadBassPromise)\n      .then(() => loadPercussionPromise)\n      .then(() => {\n        loadMidiFileFromServer('test1.midi')\n          .then((data) => {\n            this.midiData = data;\n            this.startPlayer(data);\n          })\n          .catch((error) => {\n            console.log(error);\n            console.log(\"Error getting MIDI file from server\");\n          });\n      });\n\n    this.advanceToNextChunk = this.advanceToNextChunk.bind(this);\n  }\n\n  startPlayer(data) {\n    if (this.player && this.player.isPlaying()) {\n      this.player.stop();\n    }\n\n    this.player = new MidiPlayer.Player((event) => {\n      if (event.name === 'Note on') {\n        // console.log(event);\n        // if (event.track === 1 || event.track === 2) {\n        //   this.pianoInstrument.play(event.noteName, this.ac.currentTime, {gain:event.velocity/100});\n        // } else if (event.track === 3 || event.track === 4) {\n        //   this.bassInstrument.play(event.noteName, this.ac.currentTime, {gain:event.velocity/100});\n        // } else {\n        //   this.percussionInstrument.play(event.noteName, this.ac.currentTime, {gain:event.velocity/100});\n        // }\n        this.pianoInstrument.play(event.noteName, this.ac.currentTime, {gain:event.velocity/100});\n      }\n    });\n\n    this.player.on('endOfFile', () => {\n      console.log('end of file reached');\n      this.startPlayer(this.midiData);\n    });\n\n    this.player.loadArrayBuffer(data);\n    this.player.play();\n  }\n\n  advanceToNextChunk() {\n    console.log(this.state.chunksToDisplay);\n    // TODO show loading symbol on interface\n    this.setState({\n      transitioning: true,\n    });\n\n    // load the next MIDI file\n    loadMidiFileFromServer('test' + (this.state.currentChunkIdx + 2) + '.midi')\n      .then((data) => {\n        this.midiData = data;\n        // logic for ending the current Midi loop and starting the next piece of music\n        // when the end of the current MIDI file is reached\n        // this.player.on('endOfFile', () => {\n          // load the new data and start it\n          this.startPlayer(data);\n\n          const newArr = this.state.chunksToDisplay.slice();\n          newArr.push(this.props.chunks[this.state.currentChunkIdx + 1]);\n\n          // update the text in the UI\n          this.setState({\n            currentChunkIdx: this.state.currentChunkIdx + 1,\n            transitioning: false,\n            chunksToDisplay: newArr,\n          });\n        // });\n      })\n      .catch((error) => {\n        console.log(\"Error getting MIDI file from server\");\n\n        const newArr = this.state.chunksToDisplay.slice();\n        newArr.push(this.props.chunks[this.state.currentChunkIdx]);\n\n        this.setState({\n          currentChunkIdx: this.state.currentChunkIdx + 1,\n          transitioning: false,\n          chunksToDisplay: newArr,\n        });\n      });\n\n  }\n\n  render() {\n    return (\n      <div id=\"game-play\" className=\"GamePlay\">\n        {\n          this.state.chunksToDisplay.map((chunk, idx) => {\n            return <div className=\"chunk\" key={chunk.lastSentenceIdx}>\n              <Card style={{width: 500}}>\n                <CardText>\n                  {\n                    (() => {\n                      console.log(\"current chunk idx: \" + this.state.currentChunkIdx);\n                      let firstSentenceIdx = 0;\n                      if (idx > 0) { // if not the first chunk\n                        const previousChunk = this.state.chunksToDisplay[idx - 1].lastSentenceIdx;\n                        firstSentenceIdx = previousChunk + 1;\n                      }\n\n                      let lastSentenceIdx = chunk.lastSentenceIdx;\n                      if (idx === this.props.chunks.length - 1) { // if the last chunk\n                        lastSentenceIdx--;\n                      }\n\n                      console.log(\"sentence indices: \" + firstSentenceIdx + \" \" + lastSentenceIdx);\n\n                      let sentencesToDisplay = \"\";\n                      for (let i = firstSentenceIdx; i <= lastSentenceIdx; i++) {\n                        sentencesToDisplay += this.props.sentences[i] + \". \";\n                      }\n\n                      return sentencesToDisplay;\n                    })()\n                  }\n                </CardText>\n                {\n                  // only display the \"Next\" button if there is a next chunk and this is the current chunk\n                  this.state.currentChunkIdx + 1 < this.props.chunks.length && this.state.currentChunkIdx === idx ?\n                  <Button secondary raised onClick={this.advanceToNextChunk}>{this.state.transitioning ? \"Transitioning...\" : \"Next\"}</Button> :\n                  \"\"\n                }\n              </Card>\n              <Card style={{width: 500}}>\n                {/* This was not implemented yet. */}\n                <CardText>\n                  Valence: {chunk.valence}\n                  <br/>\n                  Arousal: {chunk.arousal}\n                  <br/>\n                  Dominance: {chunk.dominance}\n                </CardText>\n              </Card>\n            </div>;\n          })\n        }\n\n\n      </div>\n    );\n  }\n}\n\nexport default GamePlay;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Welcome from './Welcome';\nimport GamePlay from './GamePlay';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasLoadedFile: false,\n      playing: false,\n      chunks: [],\n      sentences: [],\n    };\n\n    // bind all the functions\n    this.handleFileInput = this.handleFileInput.bind(this);\n    this.play = this.play.bind(this);\n  }\n\n  handleFileInput(filename, text) {\n    console.log(filename, text);\n    let sentences = text.split(\". \");\n    sentences = sentences.filter((sentence) => sentence.length > 0);\n    console.log(sentences);\n    console.log(\"num sentences: \" + sentences.length);\n    this.setState({\n      hasLoadedFile: true,\n      loadedFilename: filename,\n      sentences: sentences,\n    });\n  }\n\n  play() {\n    fetch('/generateMusic', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({sentences: this.state.sentences}),\n    })\n      .then((resp) => resp.json())\n      .then((json) => {\n        console.log(\"Music has been generated\");\n        console.log(json);\n        this.setState({\n          playing: true,\n          chunks: json.chunks,\n        });\n      })\n      .catch((error) => {\n        console.log(\"There was an error\");\n        this.setState({\n          playing: true,\n          chunks: [\n            {\n              valence: Math.random() * 9,\n              arousal: Math.random() * 9,\n              dominance: Math.random() * 9,\n              lastSentenceIdx: 4,\n            },\n            {\n              valence: Math.random() * 9,\n              arousal: Math.random() * 9,\n              dominance: Math.random() * 9,\n              lastSentenceIdx: 5,\n            },\n            {\n              valence: Math.random() * 9,\n              arousal: Math.random() * 9,\n              dominance: Math.random() * 9,\n              lastSentenceIdx: 7,\n            },\n            {\n              valence: Math.random() * 9,\n              arousal: Math.random() * 9,\n              dominance: Math.random() * 9,\n              lastSentenceIdx: 8,\n            },\n            {\n              valence: Math.random() * 9,\n              arousal: Math.random() * 9,\n              dominance: Math.random() * 9,\n              lastSentenceIdx: 10,\n            },\n            {\n              valence: Math.random() * 9,\n              arousal: Math.random() * 9,\n              dominance: Math.random() * 9,\n              lastSentenceIdx: 12,\n            }\n          ],\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          !this.state.playing ?\n          <Welcome fileHandler={this.handleFileInput} play={this.play} loadedFilename={this.state.loadedFilename} hasLoadedFile={this.state.hasLoadedFile}/> :\n          <GamePlay chunks={this.state.chunks} sentences={this.state.sentences} />\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport WebFontLoader from 'webfontloader';\n\nWebFontLoader.load({\n  google: {\n    families: ['Roboto:300,400,500,700', 'Material Icons'],\n  },\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}